// Generated by CoffeeScript 1.11.1

/*
Numbo is open source in:
https://github.com/Edditoria/numbo

under MIT license:
https://github.com/Edditoria/numbo/blob/master/LICENSE
 */

(function() {
  var Numbo, numbo;

  Numbo = (function() {
    var convert_enUS, tools;

    function Numbo() {}

    tools = {
      trimWhitespace: function(str) {
        return str.replace(/^\s+|\s+$/g, '');
      },
      parse99: function(arr1, arr10, separator) {
        var i, lenArr1, num, results;
        if (separator == null) {
          separator = ' ';
        }
        lenArr1 = arr1.length;
        results = [];
        for (num = i = 0; i <= 99; num = ++i) {
          if (num < lenArr1) {
            results.push(arr1[num]);
          } else if (num % 10 === 0) {
            results.push(arr10[Math.floor(num / 10)]);
          } else {
            results.push(arr10[Math.floor(num / 10)] + separator + arr1[num % 10].toLowerCase());
          }
        }
        return results;
      },
      parseCents: function(str, option) {
        var mathOption, str3dp;
        if (option == null) {
          option = 'ceil';
        }
        str3dp = (str + '000').slice(0, 3);
        mathOption = (function() {
          switch (option) {
            case 'round':
              return 'round';
            case 'floor':
              return 'floor';
            case 'ceil':
              return 'ceil';
            default:
              console.log('Error: option in parseCents() is invalid. Use the default option (Math.ceil)');
              return 'ceil';
          }
        })();
        return Math[mathOption](parseInt(str3dp, 10) / 10);
      },
      check: function(input, characters) {
        if (characters == null) {
          characters = '';
        }
      },
      normalize: function(input, characters) {
        var dotIndex, inputArr, output, regexHead, regexTail;
        if (characters == null) {
          characters = '';
        }
        if (typeof input !== 'string') {
          input = input.toString();
        }
        regexHead = /,|^[$|\-]*(0|,)*(?!\.)/g;
        regexTail = /0*$/g;
        dotIndex = input.indexOf('.');
        if (dotIndex === -1) {
          output = input.replace(regexHead, '');
        } else {
          inputArr = tools.splitNum(input);
          inputArr[0] = inputArr[0].replace(regexHead, '');
          inputArr[1] = inputArr[1].replace(regexTail, '');
          output = inputArr.join('.');
        }
        if (output.indexOf('.') === 0) {
          output = '0' + output;
        }
        if (output === '') {
          output = '0';
        }
        return output.replace(/\.$/, '');
      },
      splitNum: function(input) {
        var output;
        if (typeof input !== 'string') {
          input = input.toString();
        }
        if (input.indexOf('.') === -1) {
          output = [input, ''];
        } else {
          output = input.split('.');
        }
        if (output[0] === '') {
          output[0] = '0';
        }
        return output;
      },
      splitInt: function(int, digit) {
        var intTail, len, output, times;
        if (digit == null) {
          digit = 3;
        }
        if (typeof int !== 'string') {
          int = int.toString();
        }
        output = [];
        times = Math.ceil(int.length / digit);
        while (times) {
          len = int.length;
          intTail = int.substring(len - digit, len);
          int = int.substring(0, len - digit);
          output.unshift(intTail);
          times--;
        }
        return output;
      }
    };

    Numbo.prototype.tools = {
      trimWhitespace: tools.trimWhitespace,
      parse99: tools.parse99,
      parseCent: tools.parseCents,
      parseCents: tools.parseCents,
      normalize: tools.normalize,
      normalise: tools.normalize,
      splitNum: tools.splitNum,
      splitInt: tools.splitInt
    };

    convert_enUS = function(input, options) {
      var main, n1, n10, n1000, n1withZero, n99, speak999, speakAmt, speakDec, speakInt, speakNum;
      if (options == null) {
        options = 'default';
      }
      n1 = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
      n1withZero = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
      n10 = ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
      n1000 = ['', 'Thousand', 'Million', 'Billion', 'Trillion', 'Quadrillion', 'Quintillion', 'Sextillion', 'Septillion', 'Octillion', 'Nonillion', 'Decillion', 'Undecillion', 'Duodecillion', 'Tredecillion', 'Quattuordecillion', 'Quindecillion', 'Sexdecillion', 'Septendecillion', 'Octodecillion', 'Novemdecillion', 'Vigintillion'];
      n99 = tools.parse99(n1, n10, '-');
      speak999 = function(num, addAnd) {
        var d100, hundred, output;
        if (addAnd == null) {
          addAnd = true;
        }
        if (num <= 99) {
          return n99[num];
        } else if (num % 100 === 0) {
          return n1[Math.floor(num / 100)] + ' Hundred';
        } else {
          d100 = Math.floor(num / 100);
          hundred = addAnd ? ' Hundred and ' : ' Hundred ';
          return output = n1[d100] + hundred + n99[num % 100];
        }
      };
      speakInt = function(numArr, addAnd) {
        var i, item, len1, num, output, times, unit;
        if (addAnd == null) {
          addAnd = true;
        }
        output = [];
        times = numArr.length;
        for (num = i = 0, len1 = numArr.length; i < len1; num = ++i) {
          item = numArr[num];
          times--;
          if (item !== '000') {
            unit = ' ' + n1000[times];
            item = speak999(parseInt(item, 10), addAnd);
            output.push(item + unit);
          }
        }
        return output.join(' ').replace(/^\s+|\s+$/g, '');
      };
      speakDec = function(str) {
        var item, strArr;
        if (str === '') {
          return '';
        } else {
          strArr = (function() {
            var i, len1, results;
            results = [];
            for (i = 0, len1 = str.length; i < len1; i++) {
              item = str[i];
              results.push(n1withZero[parseInt(item, 10)]);
            }
            return results;
          })();
          return ' point ' + strArr.join(' ');
        }
      };
      speakNum = function(str) {
        var dec, int, intArr, strSplited;
        if (str === '0') {
          return 'zero';
        } else if (str === '1') {
          return 'one';
        } else {
          strSplited = tools.splitNum(str);
          intArr = tools.splitInt(strSplited[0]);
          int = speakInt(intArr);
          if (int === '') {
            int = 'zero';
          }
          dec = speakDec(strSplited[1]);
          return (int + dec).toLowerCase();
        }
      };
      speakAmt = function(str, options) {
        var andWord, centUnit, cents, dec, dollarUnit, dollars, int, intArr, output, strSplited;
        if (options == null) {
          options = 'amount';
        }
        if (str === '0') {
          output = 'Null';
        } else {
          dollarUnit = ['Dollar', 'Dollars'];
          centUnit = ['Cent', 'Cents'];
          strSplited = tools.splitNum(str);
          intArr = tools.splitInt(strSplited[0]);
          int = speakInt(intArr, false);
          dollars = int === '' ? '' : int === 'One' ? ' ' + dollarUnit[0] : ' ' + dollarUnit[1];
          dec = n99[tools.parseCents(strSplited[1])];
          cents = dec === '' && int === '' ? 'Null' : dec === '' ? 'No Cent' : dec === 'One' ? ' Cent' : ' Cents';
          andWord = dollars === '' ? '' : ' and ';
          output = int + dollars + andWord + dec + cents;
        }
        output = options === 'cheque' ? output === 'Null' ? 'Null' : output + ' Only' : options === 'amount' ? output.replace(' and No Cent', '').toLowerCase() : (console.log('Error: option in speakAmt is invalid.'), output = null);
        return output;
      };
      main = function(input, options) {
        if (input === '') {
          return null;
        } else if (input === '1e+100') {
          return 'Ding! One Google... Oops... One Googol!!';
        } else {
          input = tools.normalize(input);
          switch (options) {
            case 'default':
            case 'number':
              return speakNum(input);
            case 'cheque':
            case 'check':
              return speakAmt(input, 'cheque');
            case 'amount':
            case 'amt':
              return speakAmt(input, 'amount');
            default:
              console.log('option in enUS is not valid');
              return null;
          }
        }
      };
      return main(input, options);
    };

    Numbo.prototype.enUS = convert_enUS;

    Numbo.prototype.convert = function(num, options) {
      if (options == null) {
        options = 'default';
      }
      if (options === 'default') {
        return convert_enUS(num);
      } else if (typeof options === 'string') {
        if (this[options] != null) {
          return this[options](num);
        } else {
          return convert_enUS(num, options);
        }
      } else if (Object.prototype.toString.call(options) === '[object Object]') {
        console.log('Error: Invalid option. Option does not supports object yet. Returns null');
        return null;
      } else {
        console.log('Error: Invalid option. Option should be a string or an object. Returns null');
        return null;
      }
    };

    return Numbo;

  })();

  numbo = new Numbo();

  if ((typeof module !== "undefined" && module !== null) && module.exports) {
    module.exports = numbo;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.numbo = numbo;
  }

}).call(this);
